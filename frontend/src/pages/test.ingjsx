import React, { useState, useEffect } from "react";
import Cookies from "js-cookie";
import Map from "../components/Map";
import * as jwtDecode from "jwt-decode";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  XCircle,
  CheckCircle,
  ChevronLeft,
  Calendar,
  MapPin,
  Users,
  User,
  DollarSign,
  Globe,
  Accessibility,
  Star,
  Edit,
  Trash2,
  Mail,
  Phone,
  Award,
  Clock,
  ChevronRight,
  ChevronUp,
  ChevronDown,
  Send,
} from "lucide-react";
import { useNavigate, useParams } from "react-router-dom";
import Loader from "../components/Loader";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Tag } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";

const ImageGallery = ({ pictures }) => {
  // ... (ImageGallery component code remains unchanged)
};

const StarRating = ({ rating, setRating, readOnly = false }) => {
  return (
    <div className="flex items-center">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star
          key={star}
          className={`w-6 h-6 ${readOnly ? '' : 'cursor-pointer'} ${
            star <= rating ? "text-yellow-500 fill-current" : "text-gray-300"
          }`}
          onClick={() => !readOnly && setRating(star)}
          aria-label={`${star} star${star !== 1 ? 's' : ''}`}
        />
      ))}
    </div>
  );
};

const CommentSection = ({ activity, onAddComment, currentUser }) => {
  const [newComment, setNewComment] = useState("");
  const [userRating, setUserRating] = useState(0);
  const [error, setError] = useState("");
  const [isAnonymous, setIsAnonymous] = useState(false);

  const validateComment = (content) => {
    if (!content || content.trim() === "") {
      setError("Comment cannot be empty");
      return false;
    }
    setError("");
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateComment(newComment)) return;

    const commentData = {
      content: newComment.trim(),
      rating: userRating,
      username: isAnonymous ? "Anonymous" : currentUser.name,
      activityId: activity._id,
    };

    try {
      const response = await fetch('http://localhost:4000/api/comments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${Cookies.get('jwt')}`,
        },
        body: JSON.stringify(commentData),
      });

      if (!response.ok) {
        throw new Error('Failed to submit comment');
      }

      const data = await response.json();
      onAddComment(data);
      setNewComment("");
      setUserRating(0);
    } catch (error) {
      setError("Failed to submit comment. Please try again.");
      console.error("Error submitting comment:", error);
    }
  };

  return (
    <div className="mt-8">
      <h2 className="text-2xl font-bold mb-4">Comments and Ratings</h2>
      <form onSubmit={handleSubmit} className="mb-6">
        <div className="mb-4">
          <label htmlFor="rating" className="block text-sm font-medium text-gray-700 mb-1">
            Your Rating (Optional)
          </label>
          <StarRating rating={userRating} setRating={setUserRating} />
        </div>
        <div className="mb-4">
          <label htmlFor="comment" className="block text-sm font-medium text-gray-700 mb-1">
            Your Comment
          </label>
          <Textarea
            id="comment"
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Write your comment here..."
            className="w-full"
            rows={4}
          />
        </div>
        <div className="flex items-center space-x-2 mb-4">
          <Switch
            id="anonymous-mode"
            checked={isAnonymous}
            onCheckedChange={setIsAnonymous}
          />
          <Label htmlFor="anonymous-mode">Post anonymously</Label>
        </div>
        {error && <p className="text-red-500 mb-2">{error}</p>}
        <Button type="submit" className="flex items-center">
          <Send className="w-4 h-4 mr-2" />
          Submit
        </Button>
      </form>
      <div className="space-y-4">
        {activity.comments && activity.comments.length > 0 ? (
          activity.comments.map((comment, index) => (
            <Card key={index}>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Avatar className="w-8 h-8 mr-2">
                      <AvatarFallback>{comment.username.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <CardTitle>{comment.username}</CardTitle>
                  </div>
                  <StarRating rating={comment.rating} readOnly={true} />
                </div>
              </CardHeader>
              <CardContent>
                <p>{comment.content}</p>
              </CardContent>
            </Card>
          ))
        ) : (
          <p className="text-gray-500 italic">No comments yet. Be the first to comment!</p>
        )}
      </div>
    </div>
  );
};

const ActivityDetail = () => {
  const { id } = useParams();
  const [activity, setActivity] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userRole, setUserRole] = useState(Cookies.get("role") || "guest");
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);
  const [deleteError, setDeleteError] = useState(null);
  const [advertiserProfile, setAdvertiserProfile] = useState(null);
  const [canModify, setCanModify] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [activityRating, setActivityRating] = useState(0);
  const [showRatingButton, setShowRatingButton] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    const fetchActivityDetails = async () => {
      if (!id) {
        setError("Invalid activity ID.");
        setLoading(false);
        return;
      }

      setLoading(true);
      try {
        const token = Cookies.get("jwt");
        const response = await fetch(
          `http://localhost:4000/${userRole}/activities/${id}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (!response.ok) {
          throw new Error("Failed to fetch activity details");
        }

        const data = await response.json();
        setActivity(data);
        setError(null);

        if (data.advertiser) {
          setAdvertiserProfile(data.advertiser);
        }
        if (token) {
          const decodedToken = jwtDecode.jwtDecode(token);
          setCanModify(decodedToken.id === data.advertiser._id);
          setCurrentUser({ name: decodedToken.name, id: decodedToken.id });
        }
      } catch (err) {
        setError("Error fetching activity details. Please try again later.");
        console.error("Error fetching activity details:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchActivityDetails();
  }, [id, userRole]);

  const handleUpdate = () => {
    navigate(`/update-activity/${id}`);
  };

  const handleDelete = async () => {
    setShowDeleteConfirm(false);
    setLoading(true);
    setDeleteError(null);
    try {
      const token = Cookies.get("jwt");
      const response = await fetch(
        `http://localhost:4000/${userRole}/activities/${id}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        if (response.status === 400) {
          setDeleteError(errorData.message);
          return;
        }
        throw new Error("Failed to delete activity");
      }

      setShowDeleteSuccess(true);
    } catch (err) {
      setError("Error deleting activity. Please try again later.");
      console.error("Error deleting activity:", err);
    } finally {
      setLoading(false);
    }
  };

  const calculateDiscountedPrice = (originalPrice, discountPercentage) => {
    return (originalPrice * (100 - discountPercentage) / 100).toFixed(2);
  };

  const handleAddComment = (newComment) => {
    setActivity(prevActivity => ({
      ...prevActivity,
      comments: [...(prevActivity.comments || []), newComment]
    }));
  };

  const handleActivityRating = async () => {
    try {
      const response = await fetch(`http://localhost:4000/api/activities/${id}/rate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${Cookies.get('jwt')}`,
        },
        body: JSON.stringify({ rating: activityRating }),
      });

      if (!response.ok) {
        throw new Error('Failed to submit activity rating');
      }

      const data = await response.json();
      setActivity(prevActivity => ({
        ...prevActivity,
        rating: data.newRating,
      }));
      setShowRatingButton(false);
    } catch (error) {
      console.error("Error submitting activity rating:", error);
    }
  };

  if (loading) {
    return <Loader />;
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div
          className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
          role="alert"
        >
          <strong className="font-bold">Error!</strong>
          <span className="block sm:inline"> {error}</span>
        </div>
      </div>
    );
  }

  if (!activity) {
    return <div className="min-h-screen flex items-center justify-center">
      <p className="text-xl font-semibold">No activity found.</p>
    </div>;
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-[#1a202c] text-white py-20 px-4">
        <div className="container mx-auto text-center">
          <h1 className="text-4xl md:text-6xl font-bold mb-4">{activity.name}</h1>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <div className="p-6">
          <div className="flex flex-col md:flex-row gap-8">
            <div className="flex-[2] bg-white shadow-md rounded-lg p-8 flex flex-col justify-center h-full">
              <div className="mb-6 flex items-center justify-between">
                <h1 className="text-4xl font-bold">{activity.name}</h1>
                <div className="flex flex-col items-end">
                  <div className="flex items-center bg-yellow-100 px-3 py-1 rounded-full">
                    <Star className="w-8 h-8 text-yellow-500 mr-2" />
                    <span className="text-2xl font-semibold">
                      {activity.rating || "N/A"}
                    </span>
                  </div>
                  <div className="mt-2">
                    <label htmlFor="activity-rating" className="sr-only">Rate this activity</label>
                    <StarRating
                      rating={activityRating}
                      setRating={(rating) => {
                        setActivityRating(rating);
                        setShowRatingButton(true);
                      }}
                    />
                  </div>
                  {showRatingButton && (
                    <Button onClick={handleActivityRating} className="mt-2">
                      Add your rating
                    </Button>
                  )}
                </div>
              </div>

              <div className="flex gap-8">
                <div className="flex-1 space-y-4">
                </div>
                <div className="lg:w-2/3">
                  <ImageGallery pictures={activity.pictures} />
                  <div className="h-6"></div>
                  <p className="text-lg text-gray-600 mb-6">{activity.description}</p>
                </div>

                <div className="lg:w-1/3 space-y-6">
                  <div className="space-y-4">
                    <div className="flex items-start">
                      <div>
                        <div className="bg-red-600 text-white text-sm font-bold px-3 py-2 rounded mb-2 inline-block">
                          Limited time deal
                        </div>
                        <div className="flex flex-col items-start">
                          <div className="flex items-baseline">
                            <span className="text-4xl font-bold text-gray-900">
                              ${calculateDiscountedPrice(activity.price, activity.specialDiscount)}
                            </span>
                            <span className="ml-3 text-xl font-semibold text-red-600">
                              -{activity.specialDiscount}% Discount
                            </span>
                          </div>
                          <div className="text-xl text-gray-500 line-through mt-2">
                            ${activity.price.toFixed(2)}
                          </div>
                        </div>
                      </div>
                    </div>

                

                    <div className="flex items-center">
                      <Globe className="w-5 h-5 mr-2 text-orange-500" />
                      <span className="text-gray-700">
                        Location: {activity.location.address}
                      </span>
                    </div>

                    <div className="flex items-center">
                      <Calendar className="w-5 h-5 mr-2 text-orange-500" />
                      <span className="text-gray-700">
                        Date: {new Date(activity.timing).toLocaleDateString()}
                      </span>
                    </div>

                    <div className="flex items-center">
                      <Clock className="w-5 h-5 mr-2 text-orange-500" />
                      <span className="text-gray-700">
                        Time: {new Date(activity.timing).toLocaleTimeString([], {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </span>
                    </div>
                    <div className="flex items-center">
                      <Map
                        position={[
                          activity.location.coordinates.latitude,
                          activity.location.coordinates.longitude,
                        ]}
                        height="125px"
                        width="100%"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex flex-col md:flex-col gap-8">
              <div className="flex-1 bg-white shadow-md rounded-lg p-4">
                <div className="flex items-center mb-6">
                  <Avatar className="w-12 h-12 mr-2">
                    <AvatarImage src={advertiserProfile.logoUrl} alt={advertiserProfile.username} />
                    <AvatarFallback>
                      <User className="w-8 h-8" />
                    </AvatarFallback>
                  </Avatar>
                  <h1 className="text-xl font-bold">Advertiser Profile</h1>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center mb-4">
                    <User className="w-6 h-6 mr-2 text-orange-500" />
                    <span className="text-gray-700">
                      Advertiser:{" "}
                      {advertiserProfile ? advertiserProfile.username : "Loading..."}
                    </span>
                  </div>

                  <div className="flex items-center">
                    <Mail className="w-6 h-6 mr-2 text-orange-500" />
                    <span className="text-gray-700">
                      Email:{" "}
                      {advertiserProfile ? advertiserProfile.email : "Loading..."}
                    </span>
                  </div>

                  <div className="flex items-center">
                    <Phone className="w-6 h-6 mr-2 text-orange-500" />
                    <span className="text-gray-700">
                      Hotline:{" "}
                      {advertiserProfile ? advertiserProfile.hotline : "Loading..."}
                    </span>
                  </div>
                </div>
              </div>
              <div className="flex-1 bg-white shadow-md rounded-lg p-4">
                <div className="space-y-6">
                  <div>
                    <h2 className="text-2xl font-semibold mb-1">Categories</h2>
                    <div className="flex flex-wrap gap-2">
                      {activity.category && activity.category.length > 0 ? (
                        activity.category.map((cat, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium"
                          >
                            {cat.name}
                          </span>
                        ))
                      ) : (
                        <span className="text-gray-500 italic">
                          No categories available
                        </span>
                      )}
                    </div>
                  </div>

                  <div>
                    <h2 className="text-2xl font-semibold mb-1">Tags</h2>
                    <div className="flex flex-wrap gap-2">
                      {activity.tags && activity.tags.length > 0 ? (
                        activity.tags.map((tag, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium flex items-center"
                          >
                            <Tag className="w-4 h-4 mr-1" />
                            {tag.type}
                          </span>
                        ))
                      ) : (
                        <span className="text-gray-500 italic">No tags available</span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <CommentSection activity={activity} onAddComment={handleAddComment} currentUser={currentUser} />
        </div>

        <div className="p-6 border-t border-gray-200">
          <div className="flex justify-end mt-8">
            {canModify && (
              <div className="flex space-x-2">
                <Button onClick={handleUpdate} variant="default">
                  <Edit className="mr-2" /> Update
                </Button>
                <Button
                  onClick={() => setShowDeleteConfirm(true)}
                  variant="destructive"
                >
                  <Trash2 className="mr-2" /> Delete
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>

      <Dialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this activity? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowDeleteConfirm(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDelete}>
              Yes, Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showDeleteSuccess} onOpenChange={setShowDeleteSuccess}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Success</DialogTitle>
            <DialogDescription>
              The activity has been deleted successfully.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button onClick={() => navigate("/activity")} variant="default">
              OK
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default ActivityDetail;